import { describe, expect, it, beforeEach } from "vitest";
import { Cl } from "@stacks/transactions";

const accounts = simnet.getAccounts();
const deployer = accounts.get("deployer")!;
const lender = accounts.get("wallet_1")!;
const borrower = accounts.get("wallet_2")!;
const randomUser = accounts.get("wallet_3")!;

/**
 * Hybrid Slippage Protection Test Suite
 *
 * Tests the three-layer protection in match-offer-to-request:
 * 1. Authorization: Only lender or borrower can execute
 * 2. Age limits: Offers/requests expire after 10 days (1440 blocks)
 * 3. Price deviation: Reject if price moved >10% from snapshot
 */

describe("Hybrid Slippage Protection - Layer 1: Authorization", () => {
  beforeEach(() => {
    // Setup: Give users funds
    for (let i = 0; i < 10; i++) {
      simnet.callPublicFn("kusd-token", "faucet", [], lender);
    }
    simnet.callPublicFn("SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token", "mint", [Cl.uint(100000000), Cl.principal(borrower)], "SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4");

    // Set initial price
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(40000000000)], deployer);
  });

  it("should allow lender to execute match", () => {
    // Create offer and request
    const { result: offerResult } = simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000), // 5000 kUSD
        Cl.uint(700),        // 7% APR
        Cl.uint(14400),      // ~100 days
        Cl.uint(0),          // No reputation required
        Cl.uint(15000),      // 150% collateral
      ],
      lender
    );
    expect(offerResult).toBeOk(Cl.uint(1));

    const { result: requestResult } = simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000), // 5000 kUSD
        Cl.uint(800),        // Max 8% APR
        Cl.uint(14400),      // ~100 days
        Cl.uint(30000000),   // 0.3 sBTC collateral
      ],
      borrower
    );
    expect(requestResult).toBeOk(Cl.uint(1));

    // Lender executes match - should succeed
    const { result: matchResult } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender // Lender is authorized
    );
    expect(matchResult).toBeOk(Cl.uint(1));
  });

  it("should allow borrower to execute match", () => {
    // Create offer and request
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Borrower executes match - should succeed
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      borrower // Borrower is authorized
    );
    expect(result).toBeOk(Cl.uint(1));
  });

  it("should reject match from unauthorized third party", () => {
    // Create offer and request
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Random user tries to match - should fail with ERR_UNAUTHORIZED (401)
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      randomUser // NOT authorized!
    );
    expect(result).toBeErr(Cl.uint(401)); // ERR_UNAUTHORIZED
  });
});

describe("Hybrid Slippage Protection - Layer 2: Age Limits", () => {
  beforeEach(() => {
    // Setup: Give users funds
    for (let i = 0; i < 10; i++) {
      simnet.callPublicFn("kusd-token", "faucet", [], lender);
    }
    simnet.callPublicFn("SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token", "mint", [Cl.uint(100000000), Cl.principal(borrower)], "SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4");

    // Set initial price
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(40000000000)], deployer);
  });

  it("should allow match within age limit (1440 blocks)", () => {
    // Create offer and request
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Advance time but stay under 1440 blocks (use 100 blocks to avoid oracle staleness)
    simnet.mineEmptyBlocks(100);

    // Refresh oracle price to avoid staleness
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(40000000000)], deployer);

    // Match should still succeed (100 blocks < 1440 blocks age limit)
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender
    );
    expect(result).toBeOk(Cl.uint(1));
  });

  it("should reject stale offer (>1440 blocks old)", () => {
    // Create offer
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    // Advance time past the age limit
    simnet.mineEmptyBlocks(1441);

    // Refresh oracle price to avoid staleness (oracle has 144 block limit)
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(40000000000)], deployer);

    // Create fresh request (will be request ID 1)
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Match should fail - offer too old (ERR_OFFER_EXPIRED = 522)
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender
    );
    expect(result).toBeErr(Cl.uint(522)); // ERR_OFFER_EXPIRED
  });

  it("should reject stale request (>1440 blocks old)", () => {
    // Create request
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Advance time past the age limit
    simnet.mineEmptyBlocks(1441);

    // Refresh oracle price to avoid staleness
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(40000000000)], deployer);

    // Create fresh offer (will be offer ID 1)
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    // Match should fail - request too old (ERR_REQUEST_EXPIRED = 523)
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender
    );
    expect(result).toBeErr(Cl.uint(523)); // ERR_REQUEST_EXPIRED
  });
});

describe("Hybrid Slippage Protection - Layer 3: Price Deviation", () => {
  beforeEach(() => {
    // Setup: Give users funds
    for (let i = 0; i < 10; i++) {
      simnet.callPublicFn("kusd-token", "faucet", [], lender);
    }
    simnet.callPublicFn("SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token", "mint", [Cl.uint(100000000), Cl.principal(borrower)], "SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4");

    // Set initial price
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(40000000000)], deployer); // $40k
  });

  it("should allow match when price stays within 10% deviation", () => {
    // Create offer and request at $40k
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Price moves to $43.6k (9% increase - within 10% limit)
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(43600000000)], deployer);

    // Match should succeed
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender
    );
    expect(result).toBeOk(Cl.uint(1));
  });

  it("should allow match at exact 10% boundary (inclusive)", () => {
    // Create offer and request at $40k
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Exactly 10% increase: $40k → $44k
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(44000000000)], deployer);

    // Match should succeed (10% exactly is allowed: <= MAX_PRICE_DEVIATION_BPS)
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender
    );
    expect(result).toBeOk(Cl.uint(1));
  });

  it("should reject match just over 10% boundary", () => {
    // Create offer and request at $40k
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // 10.0125% increase: $40k → $44,005k (just over 10% limit)
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(44005000000)], deployer);

    // Match should fail - exceeds 10% boundary
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender
    );
    expect(result).toBeErr(Cl.uint(524)); // ERR_PRICE_DEVIATION_TOO_LARGE
  });

  it("should reject match when price increased >10%", () => {
    // Create offer and request at $40k
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Oracle allows 20% price jumps, but marketplace only allows 10%
    // 20% increase: $40k → $48k (oracle accepts, marketplace rejects)
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(48000000000)], deployer);

    // Match should fail - price deviation too large (ERR_PRICE_DEVIATION_TOO_LARGE = 524)
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender
    );
    expect(result).toBeErr(Cl.uint(524)); // ERR_PRICE_DEVIATION_TOO_LARGE
  });

  it("should reject match when price decreased >10%", () => {
    // Create offer and request at $40k
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Price drops from $40k to $32k (20% decrease)
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(32000000000)], deployer);

    // Match should fail - price deviation too large
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender
    );
    expect(result).toBeErr(Cl.uint(524)); // ERR_PRICE_DEVIATION_TOO_LARGE
  });

  it("should allow match with zero price change", () => {
    // Create offer and request at $40k
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Price unchanged at $40k (0% deviation)
    // No need to update price - it stays at $40k from beforeEach

    // Match should succeed
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender
    );
    expect(result).toBeOk(Cl.uint(1));
  });

  it("should check both offer and request price snapshots independently", () => {
    // Create offer at $40k
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    // Price moves to $44k (10% up - at the edge of limit)
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(44000000000)], deployer);

    // Create request at $44k
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // Price moves back to $40k (9% down from request snapshot - within limit)
    // But still 0% from offer snapshot (within limit)
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(40000000000)], deployer);

    // Match should succeed - both within 10% of their respective snapshots
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      lender
    );
    expect(result).toBeOk(Cl.uint(1));
  });
});

describe("Hybrid Slippage Protection - Defense in Depth", () => {
  beforeEach(() => {
    // Setup: Give users funds
    for (let i = 0; i < 10; i++) {
      simnet.callPublicFn("kusd-token", "faucet", [], lender);
    }
    simnet.callPublicFn("SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token", "mint", [Cl.uint(100000000), Cl.principal(borrower)], "SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4");

    // Set initial price
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(40000000000)], deployer);
  });

  it("should fail if ANY layer rejects (even if others pass)", () => {
    // Create offer and request
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      borrower
    );

    // All protections pass EXCEPT authorization
    // Age: 0 blocks old (✓ passes)
    // Price: No change (✓ passes)
    // Auth: Random user (✗ FAILS)
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      randomUser
    );
    expect(result).toBeErr(Cl.uint(401)); // Fails at first layer
  });

  it("should provide complete protection against slippage exploitation", () => {
    // Scenario: Attacker tries to exploit stale offer with price movement

    // Step 1: Lender creates offer at $40k
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-lending-offer",
      [
        Cl.uint(5000000000),
        Cl.uint(700),
        Cl.uint(14400),
        Cl.uint(0),
        Cl.uint(15000),
      ],
      lender
    );

    // Step 2: Time passes, offer becomes stale (>10 days)
    simnet.mineEmptyBlocks(1500);

    // Step 3: Price moves significantly
    // Note: Oracle has 20% rate limit, so need to update price
    simnet.callPublicFn("oracle", "set-sbtc-price", [Cl.uint(48000000000)], deployer); // +20%

    // Step 4: Give attacker sBTC for collateral
    simnet.callPublicFn("SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4.sbtc-token", "mint", [Cl.uint(100000000), Cl.principal(randomUser)], "SM3VDXK3WZZSA84XXFKAFAF15NNZX32CTSG82JFQ4");

    // Step 5: Attacker creates request and tries to match
    simnet.callPublicFn(
      "p2p-marketplace",
      "create-borrow-request",
      [
        Cl.uint(5000000000),
        Cl.uint(800),
        Cl.uint(14400),
        Cl.uint(30000000),
      ],
      randomUser // Attacker
    );

    // Step 6: Attacker tries to execute match
    const { result } = simnet.callPublicFn(
      "p2p-marketplace",
      "match-offer-to-request",
      [Cl.uint(1), Cl.uint(1)],
      randomUser
    );

    // Should fail - caught by multiple layers:
    // Layer 1: Would FAIL - randomUser is not lender or borrower (ERR_UNAUTHORIZED = 401)
    // Layer 2: FAILS - offer is >1440 blocks old (ERR_OFFER_EXPIRED = 522) ← This fails first
    // Layer 3: Would FAIL - price moved >10% (ERR_PRICE_DEVIATION_TOO_LARGE = 524)

    // Age check executes before authorization in the code flow
    expect(result).toBeErr(Cl.uint(522)); // ERR_OFFER_EXPIRED (caught first)
  });
});
